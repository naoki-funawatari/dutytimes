{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["excludeString","value","exval","String","search","replace","parseInt","DateRow","props","className","day","wdNumber","wdString","type","size","maxLength","id","onChange","e","target","output_id","document","getElementById","innerText","slice","shour","sminute","nhour","nminute","roundUp","roundDown","DateList","numberOfDays","Date","year","month","getDate","weekday","colSpan","onClick","ta","querySelectorAll","map","v","i","join","style","visibility","select","execCommand","Array","keys","getDay","key","defaultValue","cols","rows","width","heigth","renderList","a","fetch","then","res","json","today","st","display","getFullYear","getMonth","render","console","log","catch","App","useEffect","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fbcfec9.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { render } from 'react-dom';\nimport './App.css';\n\nconst excludeString = value => {\n  let exval = String(value);\n  while (exval.search(/\\D/) !== -1)\n    exval = exval.replace(/\\D/, '');\n  if (exval !== '')\n    exval = '' + parseInt(exval, 10);\n  return exval;\n}\nconst roundDown = value => {\n  if (String(value) === '')\n    return '';\n\n  let exval = ('0000' + String(value)).slice(-4);\n  let shour = exval.slice(0, 2);\n  let sminute = exval.slice(2, 4);\n  let nhour = parseInt(shour, 10);\n  let nminute = parseInt(sminute, 10);\n\n  if (nminute < 15) {\n    nminute = 0;\n  } else if (nminute < 30) {\n    nminute = 15;\n  } else if (nminute < 45) {\n    nminute = 30;\n  } else {\n    nminute = 45;\n  }\n\n  shour = ('00' + nhour).slice(-2);\n  sminute = ('00' + nminute).slice(-2);\n  return `${shour}:${sminute}`;\n}\nconst roundUp = value => {\n  if (String(value) === '')\n    return '';\n\n  let exval = ('0000' + String(value)).slice(-4);\n  let shour = exval.slice(0, 2);\n  let sminute = exval.slice(2, 4);\n  let nhour = parseInt(shour, 10);\n  let nminute = parseInt(sminute, 10);\n\n  if (nminute > 45) {\n    nhour++;\n    nminute = 0;\n  } else if (nminute > 30) {\n    nminute = 45;\n  } else if (nminute > 15) {\n    nminute = 30;\n  } else if (nminute > 0) {\n    nminute = 15;\n  } else {\n    nminute = 0;\n  }\n\n  shour = ('00' + nhour).slice(-2);\n  sminute = ('00' + nminute).slice(-2);\n  return `${shour}:${sminute}`;\n}\nconst DateRow = props => {\n  return (\n    <tr>\n      <td className=\"datelabel\">\n        <span>{props.day}日（</span>\n        <span className={`wd${props.wdNumber}`}>{props.wdString}</span>\n        <span>）</span>\n      </td>\n      <td>\n        <input type=\"text\" size=\"2\" maxLength=\"4\"\n          id={`input_start_${props.id}`}\n          onChange={e => {\n            const value = excludeString(e.target.value);\n            e.target.value = value;\n            const output_id = `output_start_${props.id}`;\n            const output = document.getElementById(output_id);\n            output.innerText = roundUp(value);\n          }}\n        />\n      </td>\n      <td>\n        <input type=\"text\" size=\"2\" maxLength=\"4\"\n          id={`input_end_${props.id}`}\n          onChange={e => {\n            const value = excludeString(e.target.value);\n            e.target.value = value;\n            const output_id = `output_end_${props.id}`;\n            const output = document.getElementById(output_id);\n            output.innerText = roundDown(value);\n          }}\n        />\n      </td>\n      <td className=\"round\" id={`output_start_${props.id}`}></td>\n      <td className=\"round\" id={`output_end_${props.id}`}></td>\n    </tr>\n  );\n}\nconst DateList = props => {\n  const endOfMonth = new Date(props.year, props.month + 1, 0);\n  const numberOfDays = endOfMonth.getDate();\n  const weekday = ['日', '月', '火', '水', '木', '金', '土'];\n  return (\n    <>\n      <table>\n        <tbody>\n          <tr>\n            <td colSpan=\"2\">{props.year} 年 {props.month + 1} 月</td>\n            <td>\n              <button type=\"button\" onClick={e => {\n                const ta = document.getElementById('textarea');\n                ta.value = [...document.querySelectorAll('.round')].map((v, i) => {\n                  return v.innerText + (i % 2 === 0 ? '\\t' : '\\n')\n                }).join('');\n                ta.style.visibility = 'visible';\n                ta.select();\n                document.execCommand('copy');\n                ta.style.visibility = 'hidden';\n              }}>copy</button>\n            </td>\n            <td></td>\n          </tr>\n          {[...new Array(numberOfDays).keys()].map((i, v) => {\n            const wdNumber = (new Date(props.year, props.month, i + 1)).getDay();\n            const wdString = weekday[wdNumber];\n            return (\n              <DateRow\n                key={i}\n                id={i}\n                day={i + 1}\n                wdNumber={wdNumber}\n                wdString={wdString}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n      <textarea id=\"textarea\" defaultValue=\"\" cols=\"1\" rows=\"1\"\n        style={{ width: 0, heigth: 0, visibility: 'hidden' }}>\n      </textarea>\n    </>\n  );\n}\nconst renderList = async () => {\n  return await fetch('https://ntp-a1.nict.go.jp/cgi-bin/json')\n    .then(res => res.json())\n    .then(res => {\n      const today = new Date(res.st * 1000);\n      const display = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate() - 7\n      );\n      render(\n        <DateList\n          year={display.getFullYear()}\n          month={display.getMonth()}\n          day={display.getDate()}\n        />,\n        document.getElementById('root')\n      );\n    }).then(() => {\n      console.log('success');\n    }).catch(() => {\n      console.log('failure');\n    });\n}\nconst App = () => {\n  useEffect(() => {\n    (async () => await renderList())()\n  });\n\n  return (\n    <></>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}